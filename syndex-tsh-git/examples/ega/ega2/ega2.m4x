dnl (c)INRIA 2002
divert(-1)
# Beginnners: please start your reading with the README file.

# ----------
# NOTRACEDEF, when defined, prevents SynDEx macros from generating a comment,
# trace of the macro call, before the body of the generated code

define(`NOTRACEDEF')

# ------------
# NBITERATIONS, when defined, is used by the loop_/endloop_ macros to generate
# (for every computation or communication sequence of every processor)
# a counted loop with a number of iterations equal to NBITERATIONS, otherwise,
# when NBITERATIONS is not defined, the loop_/endloop_ macros generate endless
# loops.

define(`NBITERATIONS', 5)

# -------------
# Constant node buffers may be initialized at declaration time,
# by defining the macro <bufferName>_alloc_(bufferName,memoryBank)
# (if it is not defined, regular buffXFer allocation will be generated).
# To allow more complex initializations, such as computed initializations,
# they are also initialized during the main_ INIT phase,
# with the macro call: <constantNodeName>(bufferName)


# sensor coef1 coef1 {float[2] !o}
def(`fcoeffs',`ifelse(
MGC,INIT,`	printf("constant filter_coeffs :\n");
		scanf("%ff",&$1);',
MGC,LOOP,`dnl',
MGC,END,`dnl')')

# ------------
# Window nodes are initialized during the main_ INIT phase,
# with the macro call: <windowNodeName>(outputBufferName)
# During the main_ LOOP phase, they are refreshed with the shift_ macro.

# function wind window {float ?i {float[2]} !o} root
def(`window', `ifelse(
MGC,INIT,`$3[0] = $1[0];',
MGC,LOOP,`$3[0] = $2[0];',
MGC,END,`dnl')')

# ------------
# Memory nodes are initialized during the main_ INIT phase,
# and are "finalized" during the main_ END phase,
# with the macro call: <memoryNodeName>(outputBufferName)
# During the main_ LOOP phase, they are refreshed with the copy_ macro.

# Window v_delay
define(`float_v_delay',`ifelse(
MGC,`INIT',`{int i;for(i=0;i<$1;i++){
		 $4[i] = $2[0];
}
}',
MGC,`LOOP',`dnl',
MGC,`END',`dnl')')

divert`'dnl ---------------- end of file ------------------

