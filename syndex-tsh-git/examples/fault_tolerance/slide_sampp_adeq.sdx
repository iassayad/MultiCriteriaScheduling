syndex_version : "6.7.0"
application description : ""

# Libraries

# Algorithms
def sensor I1  :
 ! datatype_1[1] out_A 1 ;
 ! datatype_1[1] out_B 2 ;
description : "Random Sensor"

def sensor I2  :
 ! datatype_1[1] out_B 1 ;
description : "Random Sensor"

def algorithm A  :
 ? datatype_1[1] in_I1 1 ;
 ! datatype_1[1] out_C 1 ;
code_phases:  loopseq;
description : "Random Operation"

def algorithm B  :
 ? datatype_1[1] in_I2 1 ;
 ? datatype_1[1] in_I1 2 ;
 ! datatype_1[1] out_C 1 ;
code_phases:  loopseq;
description : "Random Operation"

def algorithm C  :
 ? datatype_1[1] in_A 1 ;
 ? datatype_1[1] in_B 2 ;
 ! datatype_1[1] out_O 1 ;
code_phases:  loopseq;
description : "Random Operation"

def actuator O  :
 ? datatype_1[1] in_C 1 ;
description : "Random Actuator"

def algorithm main_algo_m  460,251:
conditions: true;
references:
 I1  I1 @114,100;
 I2  I2 @114,173;
 A  A @208,181;
 B  B @209,102;
 C  C @319,133;
 O  O @431,133;
dependences:
 strong_precedence_data I1.out_A -> A.in_I1;
 strong_precedence_data I1.out_B -> B.in_I1;
 strong_precedence_data I2.out_B -> B.in_I2;
 strong_precedence_data A.out_C -> C.in_A;
 strong_precedence_data B.out_C -> C.in_B;
 strong_precedence_data C.out_O -> O.in_C;
code_phases:  loopseq;


# Architectures
def operator P1 :
gate GATE_TYPE_1 gate_1;gate GATE_TYPE_1 gate_2;gate GATE_TYPE_1 gate_3;gate GATE_TYPE_1 gate_4;
I2 = 1.;
I1 = 1.;
O = 2.;
C = 1.;
B = 2.;
A = 1.;
code_phases:  loopseq;

def media GATE_TYPE_1 :
sampp;
datatype_1 = 1.;

def architecture main_archi 534,328:
operators:
 P1 P1 @89,41;
 P1 P2 @89,218;
 P1 P3 @378,220;
medias:
 GATE_TYPE_1 L13 no_broadcast @171,30;
 GATE_TYPE_1 L12 no_broadcast @5,148;
 GATE_TYPE_1 L23 no_broadcast @183,265;
connections:
 P1.gate_1 L12;
 P1.gate_2 L13;
 P2.gate_1 L12;
 P2.gate_2 L23;
 P3.gate_1 L13;
 P3.gate_2 L23;


# Main Algorithm / Main Architecture
main algorithm main_algo_m ;
main architecture main_archi;

# Extra durations

# Software components

# Constraints

#Schedules:
#media L12:
# /Send_P2_P1(//main_algo_m/I1.out_B): 1. .. 2.;
# /Send_P2_P1(//main_algo_m/A.out_C): 2. .. 3.;
#media L13:
#operator P1:
# //main_algo_m/I2: 0. .. 1.;
# //main_algo_m/B: 2. .. 4.;
# //main_algo_m/C: 4. .. 5.;
# //main_algo_m/O: 5. .. 7.;
#operator P2:
# //main_algo_m/I1: 0. .. 1.;
# //main_algo_m/A: 1. .. 2.;
#operator P3:
#media L23:

# Adequation result

schedules:

operation_scheduled //main_algo_m/O:
calcul actuator O  (ihm //main_algo_m/O);
scheduled: operator P1 3 5. 41 
ports:
 ? datatype_1 [1] in_C 1;

operation_scheduled //main_algo_m/C:
calcul algorithm C  (ihm //main_algo_m/C);
scheduled: operator P1 2 4. 36 
ports:
 ? datatype_1 [1] in_A 1;
 ? datatype_1 [1] in_B 2;
 ! datatype_1 [1] out_O 1;

operation_scheduled //main_algo_m/B:
calcul algorithm B  (ihm //main_algo_m/B);
scheduled: operator P1 1 2. 25 
ports:
 ? datatype_1 [1] in_I2 1;
 ? datatype_1 [1] in_I1 2;
 ! datatype_1 [1] out_C 1;

operation_scheduled //main_algo_m/A:
calcul algorithm A  (ihm //main_algo_m/A);
scheduled: operator P2 1 1. 14 
ports:
 ? datatype_1 [1] in_I1 1;
 ! datatype_1 [1] out_C 1;

operation_scheduled //main_algo_m/I2:
calcul sensor I2  (ihm //main_algo_m/I2);
scheduled: operator P1 0 0. 0 
ports:
 ! datatype_1 [1] out_B 1;

operation_scheduled //main_algo_m/I1:
calcul sensor I1  (ihm //main_algo_m/I1);
scheduled: operator P2 0 0. 1 
ports:
 ! datatype_1 [1] out_A 1;
 ! datatype_1 [1] out_B 2;

operation_scheduled /Send_P2_P1(//main_algo_m/I1.out_B):
communication send P2 (P1) //main_algo_m/I1.out_B  (ihm /Send_P2_P1(//main_algo_m/I1.out_B));
scheduled: media L12 0 1. 23 
ports:
 ? datatype_1 [1] in 1;
 ! datatype_1 [1] out 1;

operation_scheduled /Send_P2_P1(//main_algo_m/A.out_C):
communication send P2 (P1) //main_algo_m/A.out_C  (ihm /Send_P2_P1(//main_algo_m/A.out_C));
scheduled: media L12 2 2. 34 
ports:
 ? datatype_1 [1] in 1;
 ! datatype_1 [1] out 1;

operation_scheduled /Receive_P2_P1(//main_algo_m/I1.out_B):
communication receive P2 (P1) P1 //main_algo_m/I1.out_B   (ihm /Receive_P2_P1(//main_algo_m/I1.out_B));
scheduled: media L12 1 2. 24 
ports:
 ? datatype_1 [1] in 1;
 ! datatype_1 [1] out 1;

operation_scheduled /Receive_P2_P1(//main_algo_m/A.out_C):
communication receive P2 (P1) P1 //main_algo_m/A.out_C   (ihm /Receive_P2_P1(//main_algo_m/A.out_C));
scheduled: media L12 3 3. 35 
ports:
 ? datatype_1 [1] in 1;
 ! datatype_1 [1] out 1;

schedule_dependences:

 strong_precedence_data /Send_P2_P1(//main_algo_m/I1.out_B).out -> /Receive_P2_P1(//main_algo_m/I1.out_B).in conditions: true;
 strong_precedence_data /Send_P2_P1(//main_algo_m/A.out_C).out -> /Receive_P2_P1(//main_algo_m/A.out_C).in conditions: true;
 strong_precedence_data //main_algo_m/C.out_O -> //main_algo_m/O.in_C conditions: true;
 strong_precedence_data //main_algo_m/B.out_C -> //main_algo_m/C.in_B conditions: true;
 strong_precedence_data //main_algo_m/A.out_C -> /Send_P2_P1(//main_algo_m/A.out_C).in conditions: true;
 strong_precedence_data /Receive_P2_P1(//main_algo_m/I1.out_B).out -> //main_algo_m/B.in_I1 conditions: true;
 strong_precedence_data /Receive_P2_P1(//main_algo_m/A.out_C).out -> //main_algo_m/C.in_A conditions: true;
 strong_precedence_data //main_algo_m/I2.out_B -> //main_algo_m/B.in_I2 conditions: true;
 strong_precedence_data //main_algo_m/I1.out_B -> /Send_P2_P1(//main_algo_m/I1.out_B).in conditions: true;
 strong_precedence_data //main_algo_m/I1.out_A -> //main_algo_m/A.in_I1 conditions: true;
