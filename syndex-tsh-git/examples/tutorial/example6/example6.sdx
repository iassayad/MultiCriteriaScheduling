syndex_version : "6.7.0"
application description : ""

# Libraries
include "int.sdx";
include "u.sdx";

# Algorithms
def algorithm conv  200,200:
 ? int[1] i 1 @8,8;
 ! int[1] o 1 @170,8;
code_phases:  loopseq;

def algorithm algo  375,218:
conditions: true;
references:
 int/Arit_add<1>  add @215,34;
 int/Arit_mul<1>  mul @219,114;
 int/output<1>  visuadd @289,34;
 int/cst<{2}>  cste2 @26,168;
 int/output<1>  visumul @291,114;
 conv  conv @134,168;
 int/input<1>  In @28,34;
dependences:
 strong_precedence_data In.o -> mul.a;
 strong_precedence_data In.o -> add.a;
 strong_precedence_data cste2.o -> add.b;
 strong_precedence_data mul.o -> visumul.i;
 strong_precedence_data add.o -> visuadd.i;
 strong_precedence_data cste2.o -> conv.i;
 strong_precedence_data conv.o -> mul.b;
code_phases:  loopseq;


# Architectures
def operator C :
gate PPL x;
int/mul = 2.;
int/output = 3.;
int/add = 2.;
code_phases:  loopseq;

def media PPL :
sampp;
int = 2.;

def architecture archi 320,342:
operators:
 u/U pc1 @32,84;
 u/U root @220,85;
 main operator root;
medias:
 u/TCP ppl broadcast @118,45;
connections:
 root.y ppl;
 pc1.y ppl;


# Main Algorithm / Main Architecture
main algorithm algo ;
main architecture archi;

# Extra durations
extra_durations_operator u/U :
conv = 1.;
extra_durations_media u/TCP :
float = 2.;
bool = 1.;
ushort = 1.;
lint = 1.;
uchar = 1.;
int = 2.;

# Software components

software_component compute :
[\\algo\add,attach_ref]
[\\algo\mul,attach_ref]
[\\algo\conv,attach_ref]
;

software_component root :
[\\algo\In,attach_ref]
[\\algo\visuadd,attach_ref]
[\\algo\visumul,attach_ref]
;

# Constraints
absolute constraint : compute on archi.pc1 ;
absolute constraint : root on archi.root ;
