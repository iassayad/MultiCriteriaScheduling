syndex_version : "6.6.0"

# Libraries
include "int.sdx";
include "float.sdx";

# Algorithms
def algorithm mul  200,200:
 ? int[1] a 1 @8,8;
 ? int[1] b 2 @8,36;
 ! int[1] o 1 @170,8;

def sensor ins  200,200:
 ! int[1] o 1 @170,8;

def sensor inv <N> 200,200:
 ! int[N] o 1 @170,8;

def actuator outv <N> 200,200:
 ? int[N] i 1 @8,8;

def algorithm dpacc  328,136:
 ? float[1] s1 1 @9,31;
 ? float[1] s2 2 @9,59;
 ? float[1] acc 3 @8,104;
 ! float[1] acc 1 @283,68;
conditions: true;
references:
 float/Arit_mul<1> mul @90,10;
 float/Arit_add<1> add @203,39;
dependences:
 strong_precedence_data s1 -> mul.a;
 strong_precedence_data s2 -> mul.b;
 strong_precedence_data mul.o -> add.a;
 strong_precedence_data acc -> add.b;
 strong_precedence_data add.o -> acc;

def sensor inm <N;M> 200,200:
 ! float[N*M] o 1 @170,8;

def algorithm AlgorithmMain1 <N> 396,164:
conditions: true;
references:
 mul mul @239,71;
 outv<N> v_output @365,71;
 inv<N> v_input @74,139;
 ins s_input @73,43;
dependences:
 strong_precedence_data s_input.o -> mul.a;
 strong_precedence_data v_input.o -> mul.b;
 strong_precedence_data mul.o -> v_output.i;

def algorithm dp <dpaccn> 391,132:
 ? float[dpaccn] v1 1 @17,49;
 ? float[dpaccn] v2 2 @17,77;
 ! float[1] dp 1 @336,96;
conditions: true;
references:
 float/cst<{0}> zero @21,118;
 dpacc dpacc @187,66;
dependences:
 strong_precedence_data zero.o -> dpacc.acc;
 strong_precedence_data v2 -> dpacc.s2;
 strong_precedence_data v1 -> dpacc.s1;
 strong_precedence_data dpacc.acc -> dp;

def algorithm prodmatvec <a;b> 330,92:
 ? float[a*b] outm 1 @10,14;
 ? float[a] inv 2 @13,66;
 ! float[b] inm 1 @298,34;
conditions: true;
references:
 dp<b> dotprod @144,4;
dependences:
 strong_precedence_data dotprod.dp -> inm;
 strong_precedence_data outm -> dotprod.v1;
 strong_precedence_data inv -> dotprod.v2;

def algorithm AlgorithmMain2 <N;M> 363,166:
conditions: true;
references:
 inm<N;M> m1 @48,22;
 float/input<N> inv @48,126;
 float/output<M> outv @344,54;
 prodmatvec<N;M> matprodvec @185,54;
dependences:
 strong_precedence_data matprodvec.inm -> outv.i;
 strong_precedence_data inv.o -> matprodvec.inv;
 strong_precedence_data m1.o -> matprodvec.outm;


# Architectures

# Main Algorithm / Main Architecture
main algorithm AlgorithmMain2 <2;3>;

# Extra durations

# Software components

# Constraints
