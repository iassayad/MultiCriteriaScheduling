syndex_version : "6.6.0"

# Libraries
include "int.sdx";

# Algorithms
def sensor x  191,125:
 ! int[1] o 1 @161,8;

def sensor i  200,200:
 ! int[1] o 1 @170,8;

def algorithm switch1  304,96:
 ? int[1] x 1 @8,8;
 ? int[1] i 2 @9,63;
 ! int[1] o 1 @264,47;
conditions: x = 1;
references:
 int/Arit_div<1> div1 @121,20;
dependences:
 strong_precedence_data x -> div1.a;
 strong_precedence_data i -> div1.b;
 strong_precedence_data div1.o -> o;
conditions: x = 2;
references:
 int/Arit_div<1> div2 @119,17;
dependences:
 strong_precedence_data x -> div2.a;
 strong_precedence_data i -> div2.b;
 strong_precedence_data div2.o -> o;
conditions: x = 4;
references:
 int/Arit_mul<1> mul4 @109,17;
dependences:
 strong_precedence_data x -> mul4.a;
 strong_precedence_data i -> mul4.b;
 strong_precedence_data mul4.o -> o;
conditions: x = 3;
references:
dependences:
 strong_precedence_data i -> o;

def actuator o  253,81:
 ? int[1] i 1 @8,8;

def algorithm AlgorithmMain1  338,158:
conditions: true;
references:
 i i @17,106;
 x x @19,21;
 switch1 switch1 @145,50;
 o o @301,50;
dependences:
 strong_precedence_data x.o -> switch1.x;
 strong_precedence_data i.o -> switch1.i;
 strong_precedence_data switch1.o -> o.i;

def algorithm switch2  294,96:
 ? int[1] x 1 @11,65;
 ? int[1] y 2 @10,28;
 ! int[1] o 1 @276,51;
conditions: y = 1;
references:
 int/Arit_mul<1> mul1 @129,21;
dependences:
 strong_precedence_data x -> mul1.b;
 strong_precedence_data y -> mul1.a;
 strong_precedence_data mul1.o -> o;
conditions: y = 2;
references:
 switch1 switch1 @124,21;
dependences:
 strong_precedence_data y -> switch1.x;
 strong_precedence_data x -> switch1.i;
 strong_precedence_data switch1.o -> o;

def algorithm AlgorithmMain2  361,138:
conditions: true;
references:
 switch2 switch2 @174,45;
 x x @20,20;
 i i @23,88;
 o o @308,45;
dependences:
 strong_precedence_data i.o -> switch2.y;
 strong_precedence_data x.o -> switch2.x;
 strong_precedence_data switch2.o -> o.i;


# Architectures

# Main Algorithm / Main Architecture
main algorithm AlgorithmMain2 ;

# Extra durations

# Software components

# Constraints
